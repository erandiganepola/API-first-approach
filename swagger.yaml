openapi: 3.0.0
info:
  title: UgaAPI
  description: |
    This is a RESTFul API for 'Uga' clothing store.
  contact:
    name: John Doe
    url: 'http://www.uga.com'
    email: architecture@uga.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0
servers:
  - url: /
security:
  - default: []
paths:
  /product:
    get:
      description: Return a list of available items
      responses:
        '200':
          description: OK. List of products is returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductItem'
        '406':
          description: Not Acceptable. The requested media type is not supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - default: []
      x-auth-type: Application & Application User
      x-throttling-tier: Unlimited
      x-mediation-script: >-
        var accept = mc.getProperty('AcceptHeader');

        var responseCode = mc.getProperty('query.param.responseCode');

        var responseCodeSC;

        var responses = [];


        if (!responses[200]) {
         responses [200] = [];
        }

        responses[200]["application/json"] = [ {
          "price" : "string",
          "description" : "string",
          "name" : "string",
          "image" : "string"
        } ];


        if (!responses[406]) {
         responses [406] = [];
        }

        responses[406]["application/json"] = {
          "message" : "string",
          "error" : [ {
            "message" : "string",
            "code" : 0
          } ],
          "description" : "string",
          "code" : 0,
          "moreInfo" : "string"
        };


        responses[501] = [];

        responses[501]["application/json"] = {

        "code" : 501,

        "description" : "Not Implemented"}

        responses[501]["application/xml"] =
        <response><code>501</code><description>Not
        Implemented</description></response>;


        if (responseCode == null) {
         responseCode = 200;
        }


        if (!responses[responseCode]) {
          if (responses["default"]) {
            responseCode = "default"
          } else {
            responseCode = 501;
          }
        }

        if (responseCode === "default") {
          responseCodeSC = mc.getProperty('query.param.responseCode');
        } else {
          responseCodeSC = responseCode;
        }

        if (accept == null || !responses[responseCode][accept]) {
         accept = "application/json"; // assign whatever available
        }


        if (accept == "application/json") {
         mc.setProperty('CONTENT_TYPE', 'application/json');
         mc.setProperty('HTTP_SC', responseCodeSC + "");
         mc.setPayloadJSON(responses[responseCode]["application/json"]);
        }
      x-wso2-application-security:
        security-types:
          - oauth2
        optional: false
  '/product/{productId}':
    get:
      description: Get details of a product
      parameters:
        - name: productId
          in: path
          description: Product Id
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: string
      responses:
        '200':
          description: OK Requested product will be returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductItem'
        '404':
          description: Not Found. Requested API does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '406':
          description: Not Acceptable. The requested media type is not supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - default: []
      x-auth-type: Application & Application User
      x-throttling-tier: Unlimited
      x-mediation-script: >-
        var accept = mc.getProperty('AcceptHeader');

        var responseCode = mc.getProperty('query.param.responseCode');

        var responseCodeSC;

        var responses = [];


        if (!responses[200]) {
         responses [200] = [];
        }

        responses[200]["application/json"] = {
          "customerName" : "string",
          "delivered" : true,
          "address" : "string",
          "itemDescription" : "object",
          "creditCardNumber" : "string",
          "quantity" : 1.5,
          "orderId" : "string"
        };


        if (!responses[404]) {
         responses [404] = [];
        }

        responses[404]["application/json"] = {
          "message" : "string",
          "error" : [ {
            "message" : "string",
            "code" : 0
          } ],
          "description" : "string",
          "code" : 0,
          "moreInfo" : "string"
        };


        if (!responses[406]) {
         responses [406] = [];
        }

        responses[406]["application/json"] = {
          "message" : "string",
          "error" : [ {
            "message" : "string",
            "code" : 0
          } ],
          "description" : "string",
          "code" : 0,
          "moreInfo" : "string"
        };


        responses[501] = [];

        responses[501]["application/json"] = {

        "code" : 501,

        "description" : "Not Implemented"}

        responses[501]["application/xml"] =
        <response><code>501</code><description>Not
        Implemented</description></response>;


        if (responseCode == null) {
         responseCode = 200;
        }


        if (!responses[responseCode]) {
          if (responses["default"]) {
            responseCode = "default"
          } else {
            responseCode = 501;
          }
        }

        if (responseCode === "default") {
          responseCodeSC = mc.getProperty('query.param.responseCode');
        } else {
          responseCodeSC = responseCode;
        }

        if (accept == null || !responses[responseCode][accept]) {
         accept = "application/json"; // assign whatever available
        }


        if (accept == "application/json") {
         mc.setProperty('CONTENT_TYPE', 'application/json');
         mc.setProperty('HTTP_SC', responseCodeSC + "");
         mc.setPayloadJSON(responses[responseCode]["application/json"]);
        }
      x-wso2-application-security:
        security-types:
          - oauth2
        optional: false
    put:
      description: Update an existing Order
      parameters:
        - name: productId
          in: path
          description: Product Id
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: string
      requestBody:
        $ref: '#/components/requestBodies/ProductItem'
      responses:
        '200':
          description: OK. Successful response with updated Product
          headers:
            Location:
              description: The URL of the newly created resource.
              style: simple
              explode: false
              schema:
                type: string
            Content-Type:
              description: The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductItem'
        '400':
          description: Bad Request. Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found. The resource to be updated does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - default: []
      x-auth-type: Application & Application User
      x-throttling-tier: Unlimited
      x-mediation-script: >-
        var accept = mc.getProperty('AcceptHeader');

        var responseCode = mc.getProperty('query.param.responseCode');

        var responseCodeSC;

        var responses = [];


        if (!responses[200]) {
         responses [200] = [];
        }

        responses[200]["application/json"] = {
          "customerName" : "string",
          "delivered" : true,
          "address" : "string",
          "itemDescription" : "object",
          "creditCardNumber" : "string",
          "quantity" : 1.5,
          "orderId" : "string"
        };


        if (!responses[400]) {
         responses [400] = [];
        }

        responses[400]["application/json"] = {
          "message" : "string",
          "error" : [ {
            "message" : "string",
            "code" : 0
          } ],
          "description" : "string",
          "code" : 0,
          "moreInfo" : "string"
        };


        if (!responses[404]) {
         responses [404] = [];
        }

        responses[404]["application/json"] = {
          "message" : "string",
          "error" : [ {
            "message" : "string",
            "code" : 0
          } ],
          "description" : "string",
          "code" : 0,
          "moreInfo" : "string"
        };


        responses[501] = [];

        responses[501]["application/json"] = {

        "code" : 501,

        "description" : "Not Implemented"}

        responses[501]["application/xml"] =
        <response><code>501</code><description>Not
        Implemented</description></response>;


        if (responseCode == null) {
         responseCode = 200;
        }


        if (!responses[responseCode]) {
          if (responses["default"]) {
            responseCode = "default"
          } else {
            responseCode = 501;
          }
        }

        if (responseCode === "default") {
          responseCodeSC = mc.getProperty('query.param.responseCode');
        } else {
          responseCodeSC = responseCode;
        }

        if (accept == null || !responses[responseCode][accept]) {
         accept = "application/json"; // assign whatever available
        }


        if (accept == "application/json") {
         mc.setProperty('CONTENT_TYPE', 'application/json');
         mc.setProperty('HTTP_SC', responseCodeSC + "");
         mc.setPayloadJSON(responses[responseCode]["application/json"]);
        }
      x-wso2-application-security:
        security-types:
          - oauth2
        optional: false
    delete:
      description: Delete an existing Order
      parameters:
        - name: productId
          in: path
          description: Product Id
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: string
      responses:
        '200':
          description: OK. Resource successfully deleted.
        '404':
          description: Not Found. Resource to be deleted does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - default: []
      x-auth-type: Application & Application User
      x-throttling-tier: Unlimited
      x-mediation-script: >-
        var accept = mc.getProperty('AcceptHeader');

        var responseCode = mc.getProperty('query.param.responseCode');

        var responseCodeSC;

        var responses = [];

        if (!responses[200]) {
          responses[200] = [];
        }

        responses[200]["application/json"] = "";

        responses[200]["application/xml"] = "";



        if (!responses[404]) {
         responses [404] = [];
        }

        responses[404]["application/json"] = {
          "message" : "string",
          "error" : [ {
            "message" : "string",
            "code" : 0
          } ],
          "description" : "string",
          "code" : 0,
          "moreInfo" : "string"
        };


        responses[501] = [];

        responses[501]["application/json"] = {

        "code" : 501,

        "description" : "Not Implemented"}

        responses[501]["application/xml"] =
        <response><code>501</code><description>Not
        Implemented</description></response>;


        if (responseCode == null) {
         responseCode = 200;
        }


        if (!responses[responseCode]) {
          if (responses["default"]) {
            responseCode = "default"
          } else {
            responseCode = 501;
          }
        }

        if (responseCode === "default") {
          responseCodeSC = mc.getProperty('query.param.responseCode');
        } else {
          responseCodeSC = responseCode;
        }

        if (accept == null || !responses[responseCode][accept]) {
         accept = "application/json";
        }


        if (accept == "application/json") {
         mc.setProperty('CONTENT_TYPE', 'application/json');
         mc.setProperty('HTTP_SC', responseCodeSC + "");
         mc.setPayloadJSON(responses[responseCode]["application/json"]);
        } else if (accept == "application/xml") {
         mc.setProperty('CONTENT_TYPE', 'application/xml');
         mc.setProperty('HTTP_SC', responseCodeSC + "");
         mc.setPayloadXML(responses[responseCode]["application/xml"]);
        }
      x-wso2-application-security:
        security-types:
          - oauth2
        optional: false
  /order:
    post:
      description: Create a new Order
      requestBody:
        $ref: '#/components/requestBodies/Order'
      responses:
        '201':
          description: >-
            Created. Successful response with the newly created object as entity
            inthe body.Location header contains URL of newly created entity.
          headers:
            Location:
              description: The URL of the newly created resource.
              style: simple
              explode: false
              schema:
                type: string
            Content-Type:
              description: The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad Request. Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '415':
          description: >-
            Unsupported Media Type. The entity of the request was in a not
            supported format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - default: []
      x-auth-type: Application & Application User
      x-throttling-tier: Unlimited
      x-mediation-script: >-
        var accept = mc.getProperty('AcceptHeader');

        var responseCode = mc.getProperty('query.param.responseCode');

        var responseCodeSC;

        var responses = [];


        if (!responses[201]) {
         responses [201] = [];
        }

        responses[201]["application/json"] = {
          "customerName" : "string",
          "delivered" : true,
          "address" : "string",
          "itemDescription" : "object",
          "creditCardNumber" : "string",
          "quantity" : 1.5,
          "orderId" : "string"
        };


        if (!responses[400]) {
         responses [400] = [];
        }

        responses[400]["application/json"] = {
          "message" : "string",
          "error" : [ {
            "message" : "string",
            "code" : 0
          } ],
          "description" : "string",
          "code" : 0,
          "moreInfo" : "string"
        };


        if (!responses[415]) {
         responses [415] = [];
        }

        responses[415]["application/json"] = {
          "message" : "string",
          "error" : [ {
            "message" : "string",
            "code" : 0
          } ],
          "description" : "string",
          "code" : 0,
          "moreInfo" : "string"
        };


        responses[501] = [];

        responses[501]["application/json"] = {

        "code" : 501,

        "description" : "Not Implemented"}

        responses[501]["application/xml"] =
        <response><code>501</code><description>Not
        Implemented</description></response>;


        if (responseCode == null) {
         responseCode = 201;
        }


        if (!responses[responseCode]) {
          if (responses["default"]) {
            responseCode = "default"
          } else {
            responseCode = 501;
          }
        }

        if (responseCode === "default") {
          responseCodeSC = mc.getProperty('query.param.responseCode');
        } else {
          responseCodeSC = responseCode;
        }

        if (accept == null || !responses[responseCode][accept]) {
         accept = "application/json"; // assign whatever available
        }


        if (accept == "application/json") {
         mc.setProperty('CONTENT_TYPE', 'application/json');
         mc.setProperty('HTTP_SC', responseCodeSC + "");
         mc.setPayloadJSON(responses[responseCode]["application/json"]);
        }
      x-wso2-application-security:
        security-types:
          - oauth2
        optional: false
  '/order/{orderId}':
    get:
      description: Get details of an Order
      parameters:
        - name: orderId
          in: path
          description: Order Id
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: string
      responses:
        '200':
          description: OK Requested Order will be returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Not Found. Requested API does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '406':
          description: Not Acceptable. The requested media type is not supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - default: []
      x-auth-type: Application & Application User
      x-throttling-tier: Unlimited
      x-mediation-script: >-
        var accept = mc.getProperty('AcceptHeader');

        var responseCode = mc.getProperty('query.param.responseCode');

        var responseCodeSC;

        var responses = [];


        if (!responses[200]) {
         responses [200] = [];
        }

        responses[200]["application/json"] = {
          "customerName" : "string",
          "delivered" : true,
          "address" : "string",
          "itemDescription" : "object",
          "creditCardNumber" : "string",
          "quantity" : 1.5,
          "orderId" : "string"
        };


        if (!responses[404]) {
         responses [404] = [];
        }

        responses[404]["application/json"] = {
          "message" : "string",
          "error" : [ {
            "message" : "string",
            "code" : 0
          } ],
          "description" : "string",
          "code" : 0,
          "moreInfo" : "string"
        };


        if (!responses[406]) {
         responses [406] = [];
        }

        responses[406]["application/json"] = {
          "message" : "string",
          "error" : [ {
            "message" : "string",
            "code" : 0
          } ],
          "description" : "string",
          "code" : 0,
          "moreInfo" : "string"
        };


        responses[501] = [];

        responses[501]["application/json"] = {

        "code" : 501,

        "description" : "Not Implemented"}

        responses[501]["application/xml"] =
        <response><code>501</code><description>Not
        Implemented</description></response>;


        if (responseCode == null) {
         responseCode = 200;
        }


        if (!responses[responseCode]) {
          if (responses["default"]) {
            responseCode = "default"
          } else {
            responseCode = 501;
          }
        }

        if (responseCode === "default") {
          responseCodeSC = mc.getProperty('query.param.responseCode');
        } else {
          responseCodeSC = responseCode;
        }

        if (accept == null || !responses[responseCode][accept]) {
         accept = "application/json"; // assign whatever available
        }


        if (accept == "application/json") {
         mc.setProperty('CONTENT_TYPE', 'application/json');
         mc.setProperty('HTTP_SC', responseCodeSC + "");
         mc.setPayloadJSON(responses[responseCode]["application/json"]);
        }
      x-wso2-application-security:
        security-types:
          - oauth2
        optional: false
    delete:
      description: Delete an existing Order
      parameters:
        - name: orderId
          in: path
          description: Order Id
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: string
      responses:
        '200':
          description: OK. Resource successfully deleted.
        '404':
          description: Not Found. Resource to be deleted does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - default: []
      x-auth-type: Application & Application User
      x-throttling-tier: Unlimited
      x-mediation-script: >-
        var accept = mc.getProperty('AcceptHeader');

        var responseCode = mc.getProperty('query.param.responseCode');

        var responseCodeSC;

        var responses = [];

        if (!responses[200]) {
          responses[200] = [];
        }

        responses[200]["application/json"] = "";

        responses[200]["application/xml"] = "";



        if (!responses[404]) {
         responses [404] = [];
        }

        responses[404]["application/json"] = {
          "message" : "string",
          "error" : [ {
            "message" : "string",
            "code" : 0
          } ],
          "description" : "string",
          "code" : 0,
          "moreInfo" : "string"
        };


        responses[501] = [];

        responses[501]["application/json"] = {

        "code" : 501,

        "description" : "Not Implemented"}

        responses[501]["application/xml"] =
        <response><code>501</code><description>Not
        Implemented</description></response>;


        if (responseCode == null) {
         responseCode = 200;
        }


        if (!responses[responseCode]) {
          if (responses["default"]) {
            responseCode = "default"
          } else {
            responseCode = 501;
          }
        }

        if (responseCode === "default") {
          responseCodeSC = mc.getProperty('query.param.responseCode');
        } else {
          responseCodeSC = responseCode;
        }

        if (accept == null || !responses[responseCode][accept]) {
         accept = "application/json";
        }


        if (accept == "application/json") {
         mc.setProperty('CONTENT_TYPE', 'application/json');
         mc.setProperty('HTTP_SC', responseCodeSC + "");
         mc.setPayloadJSON(responses[responseCode]["application/json"]);
        } else if (accept == "application/xml") {
         mc.setProperty('CONTENT_TYPE', 'application/xml');
         mc.setProperty('HTTP_SC', responseCodeSC + "");
         mc.setPayloadXML(responses[responseCode]["application/xml"]);
        }
      x-wso2-application-security:
        security-types:
          - oauth2
        optional: false
components:
  schemas:
    ErrorListItem:
      title: >-
        Description of individual errors that may have occurred during a
        request.
      required:
        - code
        - message
      properties:
        message:
          type: string
          description: Description about individual errors occurred
        code:
          type: integer
          format: int64
    ProductItem:
      title: Product Item
      required:
        - productId
      properties:
        productId:
          type: string
        price:
          type: string
        description:
          type: string
        name:
          type: string
        image:
          type: string
    Order:
      title: Clothing Item Order
      required:
        - orderId
      properties:
        customerName:
          type: string
        delivered:
          type: boolean
        address:
          type: string
        itemDescription:
          type: object
        creditCardNumber:
          type: string
        quantity:
          type: number
        orderId:
          type: string
        subTotal:
          type: number
    Error:
      title: Error object returned with 4XX HTTP status
      required:
        - code
        - message
      properties:
        message:
          type: string
          description: Error message.
        error:
          type: array
          description: >-
            If there are more than one error list them out. Ex. list out
            validation errors by each field.
          items:
            $ref: '#/components/schemas/ErrorListItem'
        description:
          type: string
          description: A detail description about the error message.
        code:
          type: integer
          format: int64
        moreInfo:
          type: string
          description: Preferably an url with more details about the error.
  requestBodies:
    Order:
      description: Order object that needs to be added
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Order'
      required: true
    ProductItem:
      description: Product object that needs to be added
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductItem'
      required: true
  securitySchemes:
    default:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'https://test.com'
          scopes: {}
x-wso2-auth-header: Authorization
x-wso2-cors:
  corsConfigurationEnabled: false
  accessControlAllowOrigins:
    - '*'
  accessControlAllowCredentials: false
  accessControlAllowHeaders:
    - authorization
    - Access-Control-Allow-Origin
    - Content-Type
    - SOAPAction
    - apikey
    - Internal-Key
  accessControlAllowMethods:
    - GET
    - PUT
    - POST
    - DELETE
    - PATCH
    - OPTIONS
x-wso2-basePath: /ugaapi/1.0.0
x-wso2-transports:
  - http
  - https
x-wso2-response-cache:
  enabled: false
  cacheTimeoutInSeconds: 300
